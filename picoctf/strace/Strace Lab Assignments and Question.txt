Strace Lab Assignments and Question

1. Your home directory contains various files that will be used in this scenario. One is the file empty.c, whose contents are:

int main () {}

Compile this program as follows:

gcc -o empty empty.c

Now run strace to execute the empty program:

strace ./empty

What do you think the output of strace indicates in this case? How many different syscall functions do you see?

2. The file hello.c contains this simple program:

# include <stdio.h> int main () { printf("hello\n");
}

Compile hello.c to hello and execute it with strace:

gcc –o hello hello.c
strace ./hello

Compare the output of strace for empty and for hello. Which part of the strace output is boilerplate, and which part has to do with the specific program?

3. The -o option of strace writes its output to a file. Do the following:

strace -o empty-trace ./empty
strace -o hello-trace ./hello
diff empty-trace hello-trace

Explain the differences reported between traces empty-trace and hello-trace. (Colordiff is installed as well.)

4. Study the program copy.c.

# include <stdio.h>
# include <stdlib.h>
int main (int argc, char** argv) {
char c;
FILE* inFile;
FILE* outFile;
char outFileName[256];
if (argc != 3) {
printf("program usage: ./copy <in le> <out le>\n");
exit(1);
}
snprintf(outFileName, sizeof(outFileName), "%s/%s", getenv("HOME"), argv[2]); inFile = fopen(argv[1], "r");
outFile = fopen(outFileName, "w");
printf("Copying ‘‘%s to %s\n", argv[1], outFileName);
while ((c = fgetc(inFile)) != EOF) {
fprintf(outFile, "%c", c);
}

fclose(inFile); fclose(outFile); }

Compile it to an executable named copy and use strace to execute it as follows:

gcc -o copy copy.c
strace ./copy tiger.txt mytiger.txt

Explain the non-boilerplate parts of the trace by associating them with specific lines in copy.c. Are there any lines from the program that you expect to show up in the trace that don’t?

5. The file strace-identify was created by calling strace on a command. The first line of the trace has been deleted to make it harder to identify. Determine the command on which strace was called to produce this trace.

6. Sometimes strace prints out an overwhelming amount of output. One way to filter through the output is to save the trace to a file and search through the file with grep. But strace is equipped with some options that can do some summarization and filtering. To see some of these, try the following, and explain the results:

find /etc/dhcp
strace find /etc/dhcp
strace -c nd /etc/dhcp
strace -e trace= le find /etc/dhcp
strace -e trace=open,close,read,write find /etc/dhcp

7. Here is a simple shell script in script.sh:

#!/bin/bash
echo "a" > foo.txt
echo "bc" >> foo.txt echo ‘id -urn‘ >> foo.txt chmod 750 foo.txt
cat foo.txt | wc
chmod 644 foo.txt

Compare the outputs of the following calls to strace involving this script. Explain what you see in the traces in terms of the commands in the script.

strace ./script.sh
strace -f ./script.sh

8. The file mystery is an executable whose source code is not available. Use strace to explain what the program does in the context of the following examples:

./mystery foo abc
./mystery foo def
./mystery baz ghi
strace ./mystery foo abc
strace ./mystery foo def
strace ./mystery baz ghi

9. Create a one-line “secret.txt” file. Here’s an example, though of course you should choose something different as your secret:

echo "My phone number is 123-456-7890" > secret.txt

Now display the secret to yourself using cat:

cat secret.txt
My phone number is 123-456-7890

Is your secret really secret? How much do you trust the cat program? Start by running strace on cat secret.txt to determine what it's actually doing. Based on this and subsequent experiments, determine answers to the following questions:
*********************************
The cat program in the strace scenario does more than display the contents of a file? Exactly what else does it do? 
Important: Don’t incorrectly assume that just because you can’t list the files in a directory that you can’t read the contents of particular files in that directory.
How can you display the contents of a file without the extra actions reported above?
Can anyone else read your secret?
Can you read the secrets of anyone else?
How do you think the trojaned cat program was implemented? How do you think it was installed? Justify your explanations 
***********************************
Answering these questions will require some careful forensics work on your part. Write up all answers in an email or a google doc that you share with me. Explain all experiments you perform, the key results of those experiments, what you learned from each experiment, and hypotheses that you developed along the way.

Notes:

Your writeup should clearly answer all the asked questions and include sufficiently detailed explanations, evidence, etc.
Include particular lines from the output of strace in your explanations where they are relevant.
Include transcripts with the output of Linux commands in your explanations when they are relevant.
Note that the strace scenario does not include the emacs editor. If you want to use an editor to read or modify a file, you can use the nano or vim editors.